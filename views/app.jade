extends layout

block content

	.container-fluid#main


	//javascript
	script(type="text/javascript", src="https://cdn.socket.io/socket.io-1.0.6.js")

	script(type="text/javascript").

		var socket = io();
		var getStatus;
		var getCurrentsong;

		socket.on('sendMpdAorta',function(msg) {
			console.log('Mpd Aorta received');
			console.log(msg.status);
			console.log(msg.currentsong);

			var status = $.parseJSON(msg.status);
			var currentsong = $.parseJSON(msg.currentsong);

			getStatus = function() {
				return status;
			};

			getCurrentsong = function() {
				return currentsong;
			}

			renderCurrentSong(status,currentsong);
			renderProgressBar(status);
			updatePlaylist();

			// switch state for random and repeat
			var random = 1 - status.random;
			var repeat =  1 - status.repeat;
			var pause = 1;
			if (status.state === 'pause') {
				pause = 0;
			}
			var handlerList_ = [
					'random-' + random,
					'repeat-' + repeat,
					'pause-' + pause
			];
			registerMpdHandler(handlerList_);
		});

		$(document).ready(function(){

			socket.emit('requestMpdAorta');
			
			var handlerList = ['previous',
						'next','play','stop'];
			registerMpdHandler(handlerList);
			registerSeekFunc();
			registerStyles();

		});

		function mpdCommand (name) {
			$.ajax({
				url:'/mpdcommand/' + name
			}).done(function(data) {
				if (data) {
					return data;
				}
			});
		}
		function requestMpdCommand (cmd,args) {
			// cmd is a string, separated by '-'
			// for optional arguments
			// examples: 
			// 'play' random-1' / 'seek-5-150' 
			msg = JSON.stringify({cmd:cmd,args:args});
			console.log(msg);
			socket.emit('mpdCommand', msg);
		}

		function registerMpdHandler (handlerList) {
			var register = function(cmd,args) {
				// register the interface
				// via JQuery bind method
				$('#' + cmd).unbind('click');
				$('#' + cmd).bind('click',function(){
					console.log(cmd + ' clicked');
					requestMpdCommand(cmd,args);
				});
			}
			for (i in handlerList) {
				handlerArray = handlerList[i].split('-'); 
				var cmd = handlerArray.shift();
				console.log(cmd);
				console.log(handlerArray);
				var args = [];
				for (i in handlerArray) {
					args.push(handlerArray[i]);
				}
				//console.log(args);
				register(cmd,args);
			} 
		}

		function registerSeekFunc(currentsong) { 
			$('#progress-bar-container').bind('click', function(e){
				currentsong = getCurrentsong();
				var seek_ratio = 1 -(($(document).width() - e.clientX) / $(window).width()); 
				var seek_sec = String(Math.round( seek_ratio * currentsong.Time ));
				var songId = currentsong.Id;
				requestMpdCommand('seek', [songId,seek_sec]);
			});
		}

		function updatePlaylist() {
			$.ajax({
				url:'/mpdplaylist'
			}).done(function(data) {
				$('#main').append(data);
				registerStyles();
			});
		}

		//styling
		function registerStyles(){
			//controlHover
			$('.control').on('mouseenter',function(){
				$(this).addClass('bigger');
			});
			$('.control').on('mouseleave',function(){
				$(this).removeClass('bigger');
			});
		}
		
		function renderCurrentSong (status,currentsong) {
			console.log('debug' + status.random);
			console.log('debug' + status.repeat);
			//indicate status.state
			$('.control-highlight').hide();

			$('#' + status.state + '-highlight').show();

			if (status.random === '1') {
				$('#random-highlight').show();
			}
			if (status.repeat === '1') {
				$('#repeat-highlight').show();
			}

			//render current song
			if (status.state === 'stop') {
				$('#currentsong').text("");
			}
			else {
				$('#currentsong').text(currentsong.Artist + 
					" - " + currentsong.Title +
					' (' + secondsToTimeString(currentsong.Time) + ')');
			}
		}

		function renderProgressBar(status) {

			var progressBar = $('#progress-bar');

			console.log(status.state);
			if  (status.state === 'play') {
				var songTime = parseFloat(status.time.split(":")[1]);
				var elapsed = parseFloat(status.elapsed);
				startProgressbar(songTime,elapsed);
			}
			else if (status.state === 'pause') {
				stopProgressBar();
			}
			else {
				stopProgressBar();
				progressBar.css('width',0);
			}

			function startProgressbar (songTime,elapsed) {
				
				var initial_width = elapsed / songTime * 100; 
				var duration = songTime - elapsed;
				progressBar
					.stop()
					.css('width',initial_width + '%')
					.animate({'width': '100%'},duration * 1000, 'linear');
			}

			function stopProgressBar () {
				progressBar.stop();
			}
		}

		function secondsToTimeString (seconds) {
			var date = new Date(1970,0,1);
			date.setSeconds(seconds);
			return date.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
		}


		
		