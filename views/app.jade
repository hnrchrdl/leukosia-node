extends layout

block content

	.container-fluid#main


	//javascript
	script(type="text/javascript", src="https://cdn.socket.io/socket.io-1.0.6.js")

	script(type="text/javascript").
		//var mpdStatus;
		//var currentSong;

		var socket = io();
		//socket.on('changedPlayer', function(data) {
		//	var data = $.parseJSON(data);
		//	renderCurrentSong(data);
		//	alert(data);
		//)};
		socket.on('changedPlayer', function(data) {
			var currentsong = $.parseJSON(data);
			renderCurrentSong(currentsong);
			resetSeekBar();		
		});
		//- socket.on('mpd', function(msg) {
		//- 	if (msg.command === "status") {
		//- 		mpdStatus = msg.data;
		//- 		alert (data);
		//- 		}
		//- 	else if (msg.command === currentSong) {
		//- 		currentSong = msg.data;
		//- 		alert (data);
		//- 		}
		//- });

		$(document).ready(function(){
			//socket.emit('updateMpd');
			socket.emit('documentReady');
			//console.log('documentReady event');
			//status = mpdCommand('status');
			//alert (status);
			updateCurrentSong();
			updatePlaylist();
			handlerList = ['pause','previous',
						'next','play','stop',
						'random','repeat'];
			for (i in handlerList) {
				registerMpdHandler(handlerList[i]);
			}
			registerStyles();

		});

		function mpdCommand (name) {
			$.ajax({
				url:'/mpdcommand/' + name
			}).done(function(data) {
				if (data) {
					return data;
				}
			});
		}

		function registerMpdHandler (cmd) {
			$('#' + cmd).on('click',function(){
				mpdCommand(cmd);
			});
		}

		function updatePlaylist() {
			$.ajax({
				url:'/mpdplaylist'
			}).done(function(data) {
				$('#main').append(data);
				registerStyles();
			});
		}

		function updateCurrentSong() {
			$.ajax({
				url:'/mpdCommand/currentsong'
			}).done(function(msg) {
				var currentsong = $.parseJSON(msg);
				renderCurrentSong(currentsong);
				//socket.emit('get_status', function(data){
				//	alert(data);
				//});
				resetSeekBar()		
			});
		}
		//styling
		function registerStyles(){
			$('.control').on('mouseenter',function(){
				$(this).addClass('bigger');
			});
			$('.control').on('mouseleave',function(){
				$(this).removeClass('bigger');
			});
		}

		function renderCurrentSong (currentsong) {
			if (currentsong && currentsong != {}) {
				$('#artist').text(currentsong.Artist + " - ");
				$('#title').text(currentsong.Title);
			}
			else {
				$('#artist').append("currently not playing");
			}
		}

		function resetSeekBar () {
			var intervalHandle = null;
			var songTime;
			var elapsed;
			
			var setProgressBar = function(songTime,elapsed) {

				if (songTime !== 0) {
					progress = (100 - (( songTime - elapsed ) / songTime * 100)); 
					console.log("setting progress to "+ progress );
				}
				else progress = 0;
				$('.progress-bar').css('width', progress+'%').attr('aria-valuenow', progress); 
			
			}
			
			var progressInterval = function(songTime,elapsed) {
				
				intervalHandle = setInterval(function() {
					elapsed += 0.5;
					console.log('elapsed'+elapsed)
					setProgressBar(songTime,elapsed);
				},500);
				//intervalHandle();

			};
			
			$.ajax({
				url : "mpdCommand/status"
			}).done(function (msg) {
				var status = $.parseJSON(msg);
				songTime = parseFloat(status.time.split(":")[1]);
				elapsed = parseFloat(status.elapsed);
				if (intervalHandle) {
					clearInterval(intervalHandle);
					intervalHandle = null;
				}
				setProgressBar(songTime,elapsed);
				if (status.state === 'play') {
					progressInterval(songTime,elapsed);
				}
			});
		}

		
		